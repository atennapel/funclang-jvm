data List t
  | Nil
  | Cons t (List t);

head : t -> List t -> t;
head def l =
  case l {
    Nil -> def;
    Cons hd tl -> hd;
  };

map : (a -> b) -> List a -> List b;
map f l =
  case l {
    Nil -> Nil;
    Cons hd tl -> Cons (f hd) (map f tl);
  };

inc x = x + 1;

main () = head 0 (map inc (Cons 1 (Cons 2 Nil)));
